*************
What is tket?
*************

.. Three-sentence overview

The tket framework is an open-source quantum software development kit (SDK) for gate-based quantum computers. It compiles and optimizes quantum circuits, including the optimization of quantum kernels—a combination of quantum and classical operations—ensuring compatibility and high performance on various quantum devices and simulators. Additionally, tket facilitates the dispatch of these optimized kernels to the quantum computer and processes the received counts, or measurement outcomes, from the quantum computation. The tket framework is a platform-agnostic software and extracts the most out of the available noisy intermediate-scale quantum (NISQ) devices of today.

The tket framework, implemented in C++ to ensure optimal performance for core computational tasks, is available under the Apache 2 license, promoting its free use, modification, and distribution. There is currently an implementation of tket available in the form of the ``pytket`` package for python 3.10+, which can be installed for free using the ``pip`` package manager. Additional extension modules are available for interfacing ``pytket`` with several popular quantum software packages, including `Qiskit <https://qiskit.org/>`_, `Cirq <https://cirq.readthedocs.io/en/stable/>`_, and `pyQuil <https://pyquil-docs.rigetti.com/en/stable/>`_, and for adding more devices and simulators to target.

.. Introduction to manual and link to other resource

This user manual is targeted at readers who are already familiar with the basics of quantum computing via the circuit model and want to explore the tools available in tket. It provides a comprehensive, feature-focussed tour of the platform to take you from "Hello world" to playing with advanced techniques for speeding up and improving the accuracy of your quantum experiments.

In addition to this manual, there is also a selection of `example notebooks <https://tket.quantinuum.com/examples>`_ to see ``pytket`` in the context of the algorithms and applications that can be built on top of it. The API reference for in-depth overviews of each method, class, and interface supports these.

Why tket?
==============
Quantum computing involves the manipulation of quantum bits (qubits) to perform computations that classical computers find challenging. A quantum computation consists of initializing qubits, applying a series of quantum gates (operations), and measuring the qubits to obtain an outcome. The sequence of gates, known as a quantum circuit, is critical in determining the computation's success.

Quantum computing is difficult because of:
--------------------------------------
- **Technical Limitations**: Algorithm performance is limited by the number of gates (circuit depth).
- **Resource Constraints**: Current quantum computers don't have enough qubits for many applications.
- **Noise Constraints**: Existing qubits and quantum gates are noisy, requiring us to use fewer gates to limit errors. 
- **Device Constraints**: Specific challenges arise from gate choice, qubit connectivity, and hardware-specific nuances.

The tket framework addresses these constraints and limitations in quantum computing.

Quantum Software Workflow
=========================

The workflow within a gate-based quantum computer ecosystem involves a series of translations and transformations to take a high-level quantum circuit description and make it executable on quantum hardware or simulators.

High-Level User Engagement
--------------------------
At the highest level, users provide a high-level description of the quantum circuit they wish to execute. This description avoids individual gate considerations in favor of large algorithmic components and many-qubit operations, such as Quantum Fourier Transforms or Trotterised Hamiltonians, without the need to account for specific gate-set or architectural constraints of the quantum machine.

Role of tket
------------
The tket framework functions as a sophisticated circuit compiler that transforms high-level circuit descriptions into a 'Compiled Quantum Intermediate Form.' This form is comparable to assembly language in classical computing, tailored to meet the operational capabilities and architectural constraints of specific quantum hardware. For example, tket can also apply error mitigation strategies to enhance the reliability and accuracy of quantum computations.

.. do we need to write out "QASM, HUGR, QIR, JSON" or add links?
The intermediate form generated by tket can be represented in various formats, including QASM, HUGR, and QIR, which accommodate the nuances of different quantum computing frameworks. Additionally, tket ensures compatibility with other frameworks, for example, by supporting the conversion of quantum circuits into Qiskit objects or JSON format. These capabilities ensure the processed quantum circuits are ready for execution, with all hardware constraints satisfied and optimizations applied.


Intermediate and Low-Level Processing
--------------------------------------
After tket's compilation, the Compiled Quantum Intermediate Form is handed off to a lower-level compiler, such as L3. This compiler translates the platform-independent circuit description into actual control signals that are suitable for quantum processors. Alternatively, the intermediate form may be passed to a quantum simulator, enabling the circuit to be run on a classical computer, thus providing a flexible approach to quantum circuit testing and validation.

.. COMMENT
.. add workflow schematic like Ross's from his RIKEN talk
.. The provided schematic visualizes the workflow from the end user's application software through the tket compilation process to the ultimate execution on either quantum or classical processing units. This workflow enables users to concentrate on the algorithmic dimensions of quantum computing while leveraging tket and subsequent tools to manage the complexities of circuit optimization, translation, and execution.

Key tket Features and Advantages
===============================
The tket framework facilitates the process of preparing, optimizing, and executing quantum circuits. It acts as a bridge between the algorithmic intentions of the user, expressed in python, and the specific requirements of quantum hardware. By providing tools for circuit optimization, tket helps reduce the number of gates and, consequently, the computation's noise and duration. This optimization is crucial in the NISQ era, where minimizing errors is essential for obtaining reliable results.

- **Direct Operations**: With tket, tell it what you want, and it handles the complex parts.
- **Smart Compiler**: tket deals with common constraints found in NISQ devices.
- **Flexibility**: Use tket no matter your coding language or the quantum computer/simulator you're using.
- **Focus on Your Work**: tket handles the technical side so that you can work on your main project.

Extensions and Interoperability
--------------------------------
A key feature of tket is its extensive support for interoperability with other quantum computing frameworks and hardware platforms. Through extension modules, users can easily integrate tket with their preferred quantum computing resources. These extensions cover a wide range of functionalities, from accessing different quantum hardware and simulators to interfacing with other quantum programming languages and libraries. This flexibility makes tket a versatile tool for quantum software development, accommodating a variety of use cases and preferences.

.. COMMENT
.. add here a schematic like Ross's from his RIKEN talk
.. The following schematic provides a glimpse into tket's architecture, highlighting its compatibility with quantum libraries and its ability to target a diverse range of quantum devices and simulators.


Installation
==============

.. license
.. pip install pytket

Tket is currently available through its pythonic realisation ``pytket``, which is freely available under the Apache 2 license. To install using the ``pip`` package manager, just run ``pip install pytket`` from your terminal. Each extension module can also be installed similarly as ``pip install pytket_X``, e.g. ``pip install pytket_qiskit``.

.. Link to troubleshooting

``pytket`` is available for python versions 3.8-10 on Linux, MacOS, and Windows. For any difficulties with installation, please consult our `troubleshooting <https://tket.quantinuum.com/api-docs/install.html>`_ page.

How To Cite
==============

.. Instructions and link to paper

If you wish to cite tket in any academic publications, we generally recommend citing our `software overview paper <https://doi.org/10.1088/2058-9565/ab8e92>`_ for most cases.

If your work is on the topic of specific compilation tasks, it may be more appropriate to cite one of our other papers:

- `"On the qubit routing problem" <https://doi.org/10.4230/LIPIcs.TQC.2019.5>`_ for qubit placement (aka allocation, mapping) and routing (aka swap network insertion, connectivity solving).
- `"Phase Gadget Synthesis for Shallow Circuits" <https://doi.org/10.4204/EPTCS.318.13>`_ for representing exponentiated Pauli operators in the ZX calculus and their circuit decompositions.
- `"A Generic Compilation Strategy for the Unitary Coupled Cluster Ansatz" <https://arxiv.org/abs/2007.10515>`_ for sequencing of terms in Trotterisation and Pauli diagonalisation.

We are also keen for others to benchmark their compilation techniques against us. We recommend checking our `benchmark repository <https://github.com/CQCL/tket_benchmarking>`_ for examples on how to run basic benchmarks with the latest version of ``pytket``. Please list the release version of ``pytket`` with any benchmarks you give, and feel free to get in touch for any assistance needed in setting up fair and representative tests.

Support
==============

.. Github issues

If you spot any bugs or have any feature suggestions, feel free to add to the issues board on our `Github examples repository <https://github.com/CQCL/pytket>`_. We appreciate exact error messages and reproduction steps where possible for bug reports to help us address them quickly.

.. For more specific assistance, e-mail tket-support
.. To open up direct support channels or collaboration with teams, e-mail Denise?

There is a public slack channel for community discussion and support. Click `here <https://join.slack.com/t/tketusers/shared_invite/zt-18qmsamj9-UqQFVdkRzxnXCcKtcarLRA>`_ to join.

You can also join our `mailing list <https://list.cambridgequantum.com/cgi-bin/mailman/listinfo/tket-users>`_ for updates on new ``pytket`` releases and features. If you would like to open up direct support channels for your team, engage in research collaborations, or inquire about commercial licenses, please get in touch with us (info@cambridgequantum.com). If you have support questions please send them to tket-support@cambridgequantum.com. 



